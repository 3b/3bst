(in-package #:3bst)

(defvar *key-alias*
  (alexandria:plist-hash-table
    '(:page-up :prior
      :page-down :next
      :numpad0 :kp_0
      :numpad1 :kp_1
      :numpad2 :kp_2
      :numpad3 :kp_3
      :numpad4 :kp_4
      :numpad5 :kp_5
      :numpad6 :kp_6
      :numpad7 :kp_7
      :numpad8 :kp_8
      :numpad9 :kp_9
)
    ))

(defvar *keys*
  ;;  keysym         mask            string      appkey appcursor crlf
  '((:KP_Home       :shift      "[2J"       0   -1    0)
    (:KP_Home       :shift      "[1;2H"     0   +1    0)
    (:KP_Home       :any     "[H"        0   -1    0)
    (:KP_Home       :any     "[1~"       0   +1    0)
    (:KP_Up         :any     "Ox"       +1    0    0)
    (:KP_Up         :any     "[A"        0   -1    0)
    (:KP_Up         :any     "OA"        0   +1    0)
    (:KP_Down       :any     "Or"       +1    0    0)
    (:KP_Down       :any     "[B"        0   -1    0)
    (:KP_Down       :any     "OB"        0   +1    0)
    (:KP_Left       :any     "Ot"       +1    0    0)
    (:KP_Left       :any     "[D"        0   -1    0)
    (:KP_Left       :any     "OD"        0   +1    0)
    (:KP_Right      :any     "Ov"       +1    0    0)
    (:KP_Right      :any     "[C"        0   -1    0)
    (:KP_Right      :any     "OC"        0   +1    0)
    (:KP_Prior      :shift      "[5;2~"     0    0    0)
    (:KP_Prior      :any     "[5~"       0    0    0)
    (:KP_Begin      :any     "[E"        0    0    0)
    (:KP_End        :control    "[J"       -1    0    0)
    (:KP_End        :control    "[1;5F"    +1    0    0)
    (:KP_End        :shift      "[K"       -1    0    0)
    (:KP_End        :shift      "[1;2F"    +1    0    0)
    (:KP_End        :any     "[4~"       0    0    0)
    (:KP_Next       :shift      "[6;2~"     0    0    0)
    (:KP_Next       :any     "[6~"       0    0    0)
    (:KP_Insert     :shift      "[2;2~"    +1    0    0)
    (:KP_Insert     :shift      "[4l"      -1    0    0)
    (:KP_Insert     :control    "[L"       -1    0    0)
    (:KP_Insert     :control    "[2;5~"    +1    0    0)
    (:KP_Insert     :any     "[4h"      -1    0    0)
    (:KP_Insert     :any     "[2~"      +1    0    0)
    (:KP_Delete     :control    "[M"       -1    0    0)
    (:KP_Delete     :control    "[3;5~"    +1    0    0)
    (:KP_Delete     :shift      "[2K"      -1    0    0)
    (:KP_Delete     :shift      "[3;2~"    +1    0    0)
    (:KP_Delete     :any     "[P"       -1    0    0)
    (:KP_Delete     :any     "\\177"         +1    0    0)
    (:KP_Multiply   :any     "Oj"       +2    0    0)
    (:KP_Add        :any     "Ok"       +2    0    0)
    (:KP_Enter      :any     "OM"       +2    0    0)
    (:KP_Enter      :any     "\\r"           -1    0   -1)
    (:KP_Enter      :any     "\\r\\n"         -1    0   +1)
    (:KP_Subtract   :any     "Om"       +2    0    0)
    (:KP_Decimal    :any     "On"       +2    0    0)
    (:KP_Divide     :any     "Oo"       +2    0    0)
    (:KP_0          :any     "Op"       +2    0    0)
    (:KP_1          :any     "Oq"       +2    0    0)
    (:KP_2          :any     "Or"       +2    0    0)
    (:KP_3          :any     "Os"       +2    0    0)
    (:KP_4          :any     "Ot"       +2    0    0)
    (:KP_5          :any     "Ou"       +2    0    0)
    (:KP_6          :any     "Ov"       +2    0    0)
    (:KP_7          :any     "Ow"       +2    0    0)
    (:KP_8          :any     "Ox"       +2    0    0)
    (:KP_9          :any     "Oy"       +2    0    0)
    (:Up            :shift      "[1;2A"     0    0    0)
    (:Up            :control    "[1;5A"     0    0    0)
    (:Up            :mod1       "[1;3A"     0    0    0)
    (:Up            :any     "[A"        0   -1    0)
    (:Up            :any     "OA"        0   +1    0)
    (:Down          :shift      "[1;2B"     0    0    0)
    (:Down          :control    "[1;5B"     0    0    0)
    (:Down          :mod1       "[1;3B"     0    0    0)
    (:Down          :any     "[B"        0   -1    0)
    (:Down          :any     "OB"        0   +1    0)
    (:Left          :shift      "[1;2D"     0    0    0)
    (:Left          :control    "[1;5D"     0    0    0)
    (:Left          :mod1       "[1;3D"     0    0    0)
    (:Left          :any     "[D"        0   -1    0)
    (:Left          :any     "OD"        0   +1    0)
    (:Right         :shift      "[1;2C"     0    0    0)
    (:Right         :control    "[1;5C"     0    0    0)
    (:Right         :mod1       "[1;3C"     0    0    0)
    (:Right         :any     "[C"        0   -1    0)
    (:Right         :any     "OC"        0   +1    0)
    (:ISO_Left_Tab  :shift      "[Z"        0    0    0)
    (:Return        :mod1       "\\r"        0    0   -1)
    (:Return        :mod1       "\\r\\n"      0    0   +1)
    (:Return        :any     "\\r"            0    0   -1)
    (:Return        :any     "\\r\\n"          0    0   +1)
    (:Insert        :shift      "[4l"      -1    0    0)
    (:Insert        :shift      "[2;2~"    +1    0    0)
    (:Insert        :control    "[L"       -1    0    0)
    (:Insert        :control    "[2;5~"    +1    0    0)
    (:Insert        :any     "[4h"      -1    0    0)
    (:Insert        :any     "[2~"      +1    0    0)
    (:Delete        :control    "[M"       -1    0    0)
    (:Delete        :control    "[3;5~"    +1    0    0)
    (:Delete        :shift      "[2K"      -1    0    0)
    (:Delete        :shift      "[3;2~"    +1    0    0)
    (:Delete        :any     "[P"       -1    0    0)
    (:Delete        :any     "\\177"         +1    0    0)
    (:Home          :shift      "[2J"       0   -1    0)
    (:Home          :shift      "[1;2H"     0   +1    0)
    (:Home          :any     "[H"        0   -1    0)
    (:Home          :any     "[1~"       0   +1    0)
    (:End           :control    "[J"       -1    0    0)
    (:End           :control    "[1;5F"    +1    0    0)
    (:End           :shift      "[K"       -1    0    0)
    (:End           :shift      "[1;2F"    +1    0    0)
    (:End           :any     "[4~"       0    0    0)
    (:Prior         :control    "[5;5~"     0    0    0)
    (:Prior         :shift      "[5;2~"     0    0    0)
    (:Prior         :any     "[5~"       0    0    0)
    (:Next          :control    "[6;5~"     0    0    0)
    (:Next          :shift      "[6;2~"     0    0    0)
    (:Next          :any     "[6~"       0    0    0)
    (:F1            nil      "OP"        0    0    0)
    (:F1 #|| F13 ||#  :shift      "[1;2P"     0    0    0)
    (:F1 #|| F25 ||#  :control    "[1;5P"     0    0    0)
    (:F1 #|| F37 ||#  :mod4       "[1;6P"     0    0    0)
    (:F1 #|| F49 ||#  :mod1       "[1;3P"     0    0    0)
    (:F1 #|| F61 ||#  Mod3Mask       "[1;4P"     0    0    0)
    (:F2            nil      "OQ"        0    0    0)
    (:F2 #|| F14 ||#  :shift      "[1;2Q"     0    0    0)
    (:F2 #|| F26 ||#  :control    "[1;5Q"     0    0    0)
    (:F2 #|| F38 ||#  :mod4       "[1;6Q"     0    0    0)
    (:F2 #|| F50 ||#  :mod1       "[1;3Q"     0    0    0)
    (:F2 #|| F62 ||#  Mod3Mask       "[1;4Q"     0    0    0)
    (:F3            nil      "OR"        0    0    0)
    (:F3 #|| F15 ||#  :shift      "[1;2R"     0    0    0)
    (:F3 #|| F27 ||#  :control    "[1;5R"     0    0    0)
    (:F3 #|| F39 ||#  :mod4       "[1;6R"     0    0    0)
    (:F3 #|| F51 ||#  :mod1       "[1;3R"     0    0    0)
    (:F3 #|| F63 ||#  Mod3Mask       "[1;4R"     0    0    0)
    (:F4            nil      "OS"        0    0    0)
    (:F4 #|| F16 ||#  :shift      "[1;2S"     0    0    0)
    (:F4 #|| F28 ||#  :control    "[1;5S"     0    0    0)
    (:F4 #|| F40 ||#  :mod4       "[1;6S"     0    0    0)
    (:F4 #|| F52 ||#  :mod1       "[1;3S"     0    0    0)
    (:F5            nil      "[15~"      0    0    0)
    (:F5 #|| F17 ||#  :shift      "[15;2~"    0    0    0)
    (:F5 #|| F29 ||#  :control    "[15;5~"    0    0    0)
    (:F5 #|| F41 ||#  :mod4       "[15;6~"    0    0    0)
    (:F5 #|| F53 ||#  :mod1       "[15;3~"    0    0    0)
    (:F6            nil      "[17~"      0    0    0)
    (:F6 #|| F18 ||#  :shift      "[17;2~"    0    0    0)
    (:F6 #|| F30 ||#  :control    "[17;5~"    0    0    0)
    (:F6 #|| F42 ||#  :mod4       "[17;6~"    0    0    0)
    (:F6 #|| F54 ||#  :mod1       "[17;3~"    0    0    0)
    (:F7            nil      "[18~"      0    0    0)
    (:F7 #|| F19 ||#  :shift      "[18;2~"    0    0    0)
    (:F7 #|| F31 ||#  :control    "[18;5~"    0    0    0)
    (:F7 #|| F43 ||#  :mod4       "[18;6~"    0    0    0)
    (:F7 #|| F55 ||#  :mod1       "[18;3~"    0    0    0)
    (:F8            nil      "[19~"      0    0    0)
    (:F8 #|| F20 ||#  :shift      "[19;2~"    0    0    0)
    (:F8 #|| F32 ||#  :control    "[19;5~"    0    0    0)
    (:F8 #|| F44 ||#  :mod4       "[19;6~"    0    0    0)
    (:F8 #|| F56 ||#  :mod1       "[19;3~"    0    0    0)
    (:F9            nil      "[20~"      0    0    0)
    (:F9 #|| F21 ||#  :shift      "[20;2~"    0    0    0)
    (:F9 #|| F33 ||#  :control    "[20;5~"    0    0    0)
    (:F9 #|| F45 ||#  :mod4       "[20;6~"    0    0    0)
    (:F9 #|| F57 ||#  :mod1       "[20;3~"    0    0    0)
    (:F10           nil      "[21~"      0    0    0)
    (:F10 #|| F22 ||# :shift      "[21;2~"    0    0    0)
    (:F10 #|| F34 ||# :control    "[21;5~"    0    0    0)
    (:F10 #|| F46 ||# :mod4       "[21;6~"    0    0    0)
    (:F10 #|| F58 ||# :mod1       "[21;3~"    0    0    0)
    (:F11           nil      "[23~"      0    0    0)
    (:F11 #|| F23 ||# :shift      "[23;2~"    0    0    0)
    (:F11 #|| F35 ||# :control    "[23;5~"    0    0    0)
    (:F11 #|| F47 ||# :mod4       "[23;6~"    0    0    0)
    (:F11 #|| F59 ||# :mod1       "[23;3~"    0    0    0)
    (:F12           nil      "[24~"      0    0    0)
    (:F12 #|| F24 ||# :shift      "[24;2~"    0    0    0)
    (:F12 #|| F36 ||# :control    "[24;5~"    0    0    0)
    (:F12 #|| F48 ||# :mod4       "[24;6~"    0    0    0)
    (:F12 #|| F60 ||# :mod1       "[24;3~"    0    0    0)
    (:F13           nil      "[1;2P"     0    0    0)
    (:F14           nil      "[1;2Q"     0    0    0)
    (:F15           nil      "[1;2R"     0    0    0)
    (:F16           nil      "[1;2S"     0    0    0)
    (:F17           nil      "[15;2~"    0    0    0)
    (:F18           nil      "[17;2~"    0    0    0)
    (:F19           nil      "[18;2~"    0    0    0)
    (:F20           nil      "[19;2~"    0    0    0)
    (:F21           nil      "[20;2~"    0    0    0)
    (:F22           nil      "[21;2~"    0    0    0)
    (:F23           nil      "[23;2~"    0    0    0)
    (:F24           nil      "[24;2~"    0    0    0)
    (:F25           nil      "[1;5P"     0    0    0)
    (:F26           nil      "[1;5Q"     0    0    0)
    (:F27           nil      "[1;5R"     0    0    0)
    (:F28           nil      "[1;5S"     0    0    0)
    (:F29           nil      "[15;5~"    0    0    0)
    (:F30           nil      "[17;5~"    0    0    0)
    (:F31           nil      "[18;5~"    0    0    0)
    (:F32           nil      "[19;5~"    0    0    0)
    (:F33           nil      "[20;5~"    0    0    0)
    (:F34           nil      "[21;5~"    0    0    0)
    (:F35           nil      "[23;5~"    0    0    0)
    ))


(defun kmap (k state &key (term *term*))
  (loop for (key mask string appkey appcursor crlf) in *keys*
        unless (or (not (or (eq key k)
                            (eq key (gethash k *key-alias*))))
                   (not (or (eq mask state)
                            (eq mask :any)
                            (member mask state)))
                   (if (logtest (mode term) +mode-appkeypad+)
                       (minusp appkey)
                       (plusp appkey))
                   (and (numlock term)
                        (eql appkey 2))
                   (if (logtest (mode term) +mode-appcursor+)
                       (minusp appcursor)
                       (plusp appcursor))
                   (if (logtest (mode term) +mode-crlf+)
                       (minusp crlf)
                       (plusp crlf)))
          do (return-from kmap string))
  nil)

#++(defun default-bindings (&optional bindings)
  ;; nil=copy *bindings*, t = new, hash = copy hash
  (let ((h (make-hash-table :test 'equal)))
    (when (eq bindings nil)
      (setf bindings *bindings*))
    (unless (eq bindings t)
      (maphash (lambda (k v) (setf (gethash k h) v)) bindings))
    
    
)
  
)
